#!./.venv/bin/python

import sys
import asyncio
from time import sleep
import multiprocessing as mp
from subprocess import Popen, PIPE, STDOUT
from termcolor import colored
from pyfiglet import Figlet

config_path = None
ovpns = []
show_log = False
dc_time = None

async def connect_ovpn(x: int):
    global config_path
    global show_log
    global ovpns

    if show_log:
        ovpn = Popen(['openvpn', '--auth-nocache', '--config', config_path])
    else:
        ovpn = Popen(['openvpn', '--auth-nocache', '--config', config_path], stdout=PIPE, stderr=STDOUT)
    """
    ['__class__', '__del__', '__delattr__', '__dict__', '__dir__', '__doc__', '__enter__', '__eq__', '__exit__', 
    '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', 
    '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', 
    '__str__', '__subclasshook__', '__weakref__', '_check_timeout', '_child_created', '_close_pipe_fds', 
    '_closed_child_pipe_fds', '_communicate', '_communication_started', '_execute_child', '_get_devnull', '_get_handles', 
    '_handle_exitstatus', '_input', '_internal_poll', '_posix_spawn', '_remaining_time', '_save_input', 
    '_sigint_wait_secs', '_stdin_write', '_translate_newlines', '_try_wait', '_wait', '_waitpid_lock', 'args', 
    'communicate', 'encoding', 'errors', 'kill', 'pid', 'poll', 'returncode', 'send_signal', 'stderr', 'stdin', 
    'stdout', 'terminate', 'text_mode', 'universal_newlines', 'wait']
    """
    print(f'OVPN {x} Connect Successfully')
    ovpns.append(ovpn)


async def main(number: int):
    global dc_time

    print(colored('\n* ----------- Connecting ----------- * \n', 'green'))
    for c in list(map(connect_ovpn, [i+1 for i in range(number)])):
        await c
    while True:
        if dc_time is not None:
            sleep(dc_time)
            raise KeyboardInterrupt
        else:
            sleep(100)

def init() -> int:
    global config_path
    global show_log
    global dc_time
    f = Figlet(font='smkeyboard')
    print(colored(f.renderText('OVPN Spammer'), 'green'))
    print(colored(f.renderText('Created by: Ali Rn\n'), 'blue'))

    # Help
    try:
        if sys.argv[1] in ['-h', '--help']:
            print(colored('\n** Help: You can pass the arguments like this:\n', 'cyan'))
            print(colored('./ovpn_spammer {first_value} {second_value} {third_value} {fourth_value} \n', 'cyan'))
            print(colored(' -------------------------------------------------------------------------------------', 'magenta'))
            print(colored('|first_value  ---> number of connections (should be int) ', 'cyan'))
            print(colored('|', 'magenta'))
            print(colored('|second_value ---> connections will disconnected after {second_value} seconds\n'
                          '|                  you can pass the 0 if you don\'t want to disconnect automatically', 'cyan'))
            print(colored('|', 'magenta'))
            print(colored('|third_value  ---> path of ovpn config (~/something/like/this.ovpn)', 'cyan'))
            print(colored('|', 'magenta'))
            print(colored('|fourth_value ---> 1 will show the log and 0 will not (default is 0)', 'cyan'))
            print(colored('|', 'magenta'))
            print(colored(' -------------------------------------------------------------------------------------', 'magenta'))
            return 0
    except IndexError:
        pass

    # Number Of Connections
    valid_number = False
    try:
        number = int(sys.argv[1])
        valid_number = True
        print(colored(f'Number of connections: {number} ', 'yellow'))
    except ValueError:
        print(f'"{sys.argv[1]}" is not a valid number')
        pass
    except IndexError:
        pass

    while not valid_number:
        try:
            number = int(input(colored('How many connection do you want ? ', 'yellow')))
            valid_number = True
        except ValueError:
            pass

    # Auto DC
    valid_dc_time = False
    try:
        dc_time = int(sys.argv[2])
        valid_dc_time = True
        if dc_time == 0:
            dc_time = None
            print(colored('Connections won\'t disconnect automatically', 'yellow'))
        else:
            print(colored(f'Connections will be disconnected after {dc_time} seconds', 'yellow'))
    except ValueError:
        print(f'"{sys.argv[1]}" is not a valid number')
        pass
    except IndexError:
        pass

    if valid_dc_time is False:
        dc = None
        while dc not in ['n', 'N', 'y', 'Y']:
            dc = input(colored('Do you want connections disconnect automatically ? (y/n) ', 'yellow'))
        # DC Time
        if dc in ['y', 'Y']:
            while not valid_dc_time:
                try:
                    dc_time = int(input(colored('Disconnect after how many seconds ? ', 'yellow')))
                    valid_dc_time = True
                except ValueError:
                    pass

    # Config Path
    try:
        config_path = sys.argv[3]
        print(colored(f'Config path is: {config_path}', 'yellow'))
    except IndexError:
        pass
    if config_path is None:
        config_path = input(colored('Where is the config file ? ("./ovpn.conf") ', 'yellow'))

    # Show Log
    valid_log = False
    try:
        show_log = int(sys.argv[4])
        if show_log in [0, 1]:
            valid_log = True
            if show_log == 1:
                show_log = True
    except ValueError:
        pass
    except IndexError:
        pass

    if not valid_log:
        log = None
        while log not in ['n', 'N', 'y', 'Y']:
            log = input(colored('Do you want to see the logs ? (y/n) ', 'yellow'))
        show_log = True if log in ['y', 'Y'] else False

    if show_log:
        print(colored(f'You will see the logs', 'yellow'))
    else:
        print(colored(f'You won\'t see the logs', 'yellow'))

    return number


try:
    n = init()
    if n != 0:
        asyncio.run(main(n))
    else:
        raise KeyboardInterrupt
except KeyboardInterrupt:
    if len(ovpns) != 0:
        print(colored('\n* --------- Disconnecting ---------- * \n', 'red'))
        for i, o in enumerate(ovpns):
            o.kill()
            print(f'OVPN {i+1} Killed Successfully')
        print(colored('\n* -------------- Done -------------- * \n', 'yellow'))
